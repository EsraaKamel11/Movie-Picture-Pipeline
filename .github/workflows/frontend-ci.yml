# Name of the workflow for the frontend continuous integration pipeline
name: Frontend Continuous Integration

# Define the events that trigger this workflow
on:
  # Trigger the workflow on pull requests to the main branch, specifically for changes in the frontend directory
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
  # Allow manual triggering of the workflow using the workflow_dispatch event
  workflow_dispatch:

# Define the jobs in the workflow
jobs:
  # Linting job to check code quality
  lint:
    # Define the environment to run the job
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up the specified version of Node.js for consistency across environments
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Step 3: Cache npm dependencies to speed up workflow runs
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies using npm ci for a clean install based on package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      # Step 5: Run the linter to enforce code quality standards
      - name: Run linter
        run: npm run lint
        working-directory: frontend

  # Testing job to validate application functionality
  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Step 3: Cache npm dependencies to speed up workflow runs
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies for testing
      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      # Step 5: Run tests in CI mode to ensure they execute in a non-interactive environment
      - name: Run tests
        run: CI=true npm test
        working-directory: frontend

  # Build job to create a Docker image for the frontend application
  build:
    # Ensure this job only runs after the linting and testing jobs are successful
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Step 3: Cache npm dependencies to speed up workflow runs
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      # Set environment variable for the API URL to be used during the build
      - name: Set environment variable for API URL
        run: echo "REACT_APP_MOVIE_API_URL=${{ secrets.REACT_APP_MOVIE_API_URL }}" >> $GITHUB_ENV

      # Step 6: Build Docker image for the frontend application with the API URL environment variable
      - name: Build Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: cd frontend && docker build --build-arg REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t mp-frontend:$IMAGE_TAG .
        
      - name: Run docker container
        run: cd frontend && docker run --name mp-frontend -p 3000:3000 -d mp-frontend
